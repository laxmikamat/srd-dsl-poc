package SrdLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Feature;
  private ConceptPresentation props_FeatureReference;
  private ConceptPresentation props_ICoverable;
  private ConceptPresentation props_Screen;
  private ConceptPresentation props_SharedFeature;
  private ConceptPresentation props_SharedTestCase;
  private ConceptPresentation props_SharedUseCase;
  private ConceptPresentation props_TestCase;
  private ConceptPresentation props_TestCaseReference;
  private ConceptPresentation props_UniqueFeature;
  private ConceptPresentation props_UniqueTestCase;
  private ConceptPresentation props_UniqueUseCase;
  private ConceptPresentation props_UseCase;
  private ConceptPresentation props_UseCaseReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Feature:
        if (props_Feature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Feature = cpb.create();
        }
        return props_Feature;
      case LanguageConceptSwitch.FeatureReference:
        if (props_FeatureReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ebab0354f0e4c1aL, 0x81628b734f2fc0d1L, 0x5d28744d28f70053L, 0x5d28744d28f70054L, "feature", "", "");
          props_FeatureReference = cpb.create();
        }
        return props_FeatureReference;
      case LanguageConceptSwitch.ICoverable:
        if (props_ICoverable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICoverable = cpb.create();
        }
        return props_ICoverable;
      case LanguageConceptSwitch.Screen:
        if (props_Screen == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Screen = cpb.create();
        }
        return props_Screen;
      case LanguageConceptSwitch.SharedFeature:
        if (props_SharedFeature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SharedFeature = cpb.create();
        }
        return props_SharedFeature;
      case LanguageConceptSwitch.SharedTestCase:
        if (props_SharedTestCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SharedTestCase = cpb.create();
        }
        return props_SharedTestCase;
      case LanguageConceptSwitch.SharedUseCase:
        if (props_SharedUseCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SharedUseCase = cpb.create();
        }
        return props_SharedUseCase;
      case LanguageConceptSwitch.TestCase:
        if (props_TestCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestCase = cpb.create();
        }
        return props_TestCase;
      case LanguageConceptSwitch.TestCaseReference:
        if (props_TestCaseReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ebab0354f0e4c1aL, 0x81628b734f2fc0d1L, 0x5d28744d28f70041L, 0x5d28744d28f70042L, "testCase", "", "");
          props_TestCaseReference = cpb.create();
        }
        return props_TestCaseReference;
      case LanguageConceptSwitch.UniqueFeature:
        if (props_UniqueFeature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UniqueFeature = cpb.create();
        }
        return props_UniqueFeature;
      case LanguageConceptSwitch.UniqueTestCase:
        if (props_UniqueTestCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UniqueTestCase = cpb.create();
        }
        return props_UniqueTestCase;
      case LanguageConceptSwitch.UniqueUseCase:
        if (props_UniqueUseCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_UniqueUseCase = cpb.create();
        }
        return props_UniqueUseCase;
      case LanguageConceptSwitch.UseCase:
        if (props_UseCase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_UseCase = cpb.create();
        }
        return props_UseCase;
      case LanguageConceptSwitch.UseCaseReference:
        if (props_UseCaseReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x1ebab0354f0e4c1aL, 0x81628b734f2fc0d1L, 0x5d28744d28f70061L, 0x5d28744d28f70062L, "useCase", "", "");
          props_UseCaseReference = cpb.create();
        }
        return props_UseCaseReference;
    }
    return null;
  }
}
